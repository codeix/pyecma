(* http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262%20edition%205.1,%20June%202011.pdf *)


(* K_ Keywords 7.6.1.1 *)

K_BREAK = (?/break/?) ;
K_DO = (?/do/?) ;
K_INSTANCEOF = (?/instanceof/?) ;
K_TYPEOF = (?/typeof/?) ;
K_CASE = (?/case/?) ;
K_ELSE = (?/else/?) ;
K_NEW = (?/new/?) ;
K_VAR = (?/var/?) ;
K_CATCH = (?/catch/?) ;
K_FINALLLY = (?/finally/?) ;
K_RETURN = (?/return/?) ;
K_VOID = (?/void/?) ;
K_CONTINUE = (?/continue/?) ;
K_FOR = (?/for/?) ;
K_SWITCH = (?/switch/?) ;
K_WHILE = (?/while/?) ;
K_DEBUGGER = (?/debugger/?) ;
K_FUNCTION = (?/function/?) ;
K_THIS = (?/this/?) ;
K_WITH = (?/with/?) ;
K_DEFAULT = (?/default/?) ;
K_IF = (?/if/?) ;
K_THROW = (?/throw/?) ;
K_DELETE = (?/delete/?) ;
K_IN = (?/in/?) ;
K_TRY = (?/try/?) ;
K_ALL = K_BREAK | K_DO | K_INSTANCEOF | K_TYPEOF | K_CASE | K_ELSE | K_NEW | K_VAR | K_CATCH | K_FINALLLY |
        K_RETURN | K_VOID | K_CONTINUE | K_FOR | K_SWITCH | K_WHILE | K_DEBUGGER | K_FUNCTION | K_THIS | K_WITH | 
        K_DEFAULT | K_IF | K_THROW | K_DELETE | K_IN | K_TRY ;



(* P_ Punctuators 7.7 *)
P_SCB = (?/\{/?) ;    (* Start code block *)
P_ECB = (?/\}/?) ;    (* End code block *)
P_S_FUNC_DELI = (?/\(/?) ;    (* Function argument delimiter and precedence control *)
P_E_FUNC_DELI = (?/\)/?) ;    (* Function argument delimiter and precedence control *)
P_S_ARRAY_DELI = (?/\[/?) ;    (* Array index delimiter *)
P_E_ARRAY_DELI = (?/\]/?) ;    (* Array index delimiter *)
P_ACCESSOR = (?/\./?) ;    (* Property accessor *)
P_STAT_TERMINATOR = (?/;/?) ;    (* Statement terminator *)
P_ARGS_DELIMITER = (?/,/?) ;    (* Argument delimiter *)
P_LT = (?/</?) ;    (* Less than *)
P_GT = (?/>/?) ;    (* Greater than *)
P_LTE = (?/<=/?) ;    (* Less than or equal to *)
P_GTE = (?/>=/?) ;    (* Greater than or equal to *)
P_EQUAL = (?/==/?) ;    (* Equal to *)
P_NOT_EQUAL = (?/!=/?) ;    (* Not equal to *)
P_E_EQUAL = (?/===/?) ;    (* Exactly equal to >ECMA edition 3< *)
P_E_NOT_EQUAL = (?/!==/?) ;    (* Not exactly equal to >ECMA edition 3< *)
P_PLUS = (?/\+/?) ;    (* Unary plus, add, concatenate string *)
P_MINUS = (?/-/?) ;    (* Unary minus, subtract *)
P_MULTIPLY = (?/\*/?) ;    (* Multiply *)
P_DIVIDE = (?/\//?) ;    (* Divide *)
P_MODULO = (?/%/?) ;    (* Modulo *)
P_PLUS_INC = (?/\+\+/?) ;    (* Postfix and prefix increment *)
P_MINUS_INC = (?/--/?) ;    (* Postfix and prefix decrement *)
P_BITWISE_LEFT = (?/<</?) ;    (* Bitwise shift left *)
P_BITWISE_RIGHT = (?/>>/?) ;    (* Bitwise shift right *)
P_BITWISE_RIGHT_UNSIG = (?/>>>/?) ;    (* Bitwise shift right (unsigned) *)
P_BITWISE_AND = (?/&/?) ;    (* Bitwise AND *)
P_BITWISE_OR = (?/\|/?) ;    (* Bitwise OR *)
P_BITWISE_XOR = (?/\^/?) ;    (* Bitwise XOR *)
P_NOT = (?/!/?) ;    (* Logical not *)
P_BITWISE_NOT = (?/~/?) ;    (* Bitwise NOT *)
P_AND = (?/&&/?) ;    (* Logical AND *)
P_OR = (?/\|\|/?) ;    (* Logical OR *)
P_CONDITIONAL_OP = (?/\(?/?) ;    (* Conditional operator *)
P_PART_CONDITIONAL_OP = (?/:/?) ;    (* Part of conditional operator *)
P_ASSIGN = (?/=/?) ;    (* Assign value *)
P_ASSIGN_PLUS = (?/\+=/?) ;    (* Add and assign *)
P_ASSIGN_MINUS = (?/-=/?) ;    (* Subtract and assign *)
P_ASSIGN_MULTIPLY = (?/\*=/?) ;    (* Multiply and assign *)
P_ASSIGN_DIVIDE = (?/\/=/?) ;    (* Divide and assign *)
P_ASSIGN_MODULO = (?/%=/?) ;    (* Modulo and assign *)
P_ASSIGN_BITWISE_LEFT = (?/<<=/?) ;    (* Bitwise shift left and assign *)
P_ASSIGN_BITWISE_RIGHT = (?/>>=/?) ;    (* Bitwise shift right and assign *)
P_ASSIGN_BITWISE_RIGHT_UNSIG = (?/>>>=/?) ;    (* Bitwise shift right (unsigned) and assign *)
P_ASSIGN_BITWISE_AND = (?/&=/?) ;    (* Bitwise AND and assign *)
P_ASSIGN_BITWISE_OR = (?/\|=/?) ;    (* Bitwise OR and assign *)
P_ASSIGN_BITWISE_XOR = (?/\^=/?) ;    (* Bitwise XOR and assign *)
P_ALL = P_SCB | P_ECB | P_S_FUNC_DELI | P_E_FUNC_DELI | P_S_ARRAY_DELI | P_E_ARRAY_DELI | P_ACCESSOR | P_STAT_TERMINATOR |
        P_ARGS_DELIMITER | P_LT | P_GT | P_LTE | P_GTE | P_EQUAL | P_NOT_EQUAL | P_E_EQUAL | P_E_NOT_EQUAL | P_PLUS | P_MINUS |
        P_MULTIPLY | P_DIVIDE | P_MODULO | P_PLUS_INC | P_MINUS_INC | P_BITWISE_LEFT | P_BITWISE_RIGHT | P_BITWISE_RIGHT_UNSIG |
        P_BITWISE_AND | P_BITWISE_OR | P_BITWISE_XOR | P_NOT | P_BITWISE_NOT | P_AND | P_OR | P_CONDITIONAL_OP 
        P_PART_CONDITIONAL_OP | P_ASSIGN | P_ASSIGN_PLUS | P_ASSIGN_MINUS | P_ASSIGN_MULTIPLY | P_ASSIGN_DIVIDE |
        P_ASSIGN_MODULO | P_ASSIGN_BITWISE_LEFT | P_ASSIGN_BITWISE_RIGHT | P_ASSIGN_BITWISE_RIGHT_UNSIG | P_ASSIGN_BITWISE_AND 
        P_ASSIGN_BITWISE_OR | P_ASSIGN_BITWISE_XOR ;


(* Language *)
L_WS = ?/(?:\s+)/? ;
L_VARIABLE_REG = ?/((?:[A-z]+[0-9]*)+)/? ;
L_VARIABLE = !(K_ALL (L_WS | P_ALL)) L_VARIABLE_REG ;
P_S_OPER_DELI = (?/\(/?) ;
P_E_OPER_DELI = (?/\)/?) ;


(* T_ Types 8 *)
T_NUMBER = ?/[\+-]?[0-9]+(?:\.[0-9]*)?(?:[eE][-\+]?[0-9])?/? ;
T_UNDEFINED = ?/undefined/? ;
T_NULL = ?/null/? ;
T_BOOL = ?/true|false/? ;
T_STRING = ?/"(?:\\"|[^";])*"/?|?/'(?:\\'|[^';])*'/? ;

(* Grammar Groups *)
OPERATORS = P_MINUS | P_PLUS | P_MULTIPLY | P_MODULO | P_DIVIDE | P_BITWISE_LEFT | P_BITWISE_RIGHT | P_BITWISE_RIGHT_UNSIG ;
ASSIGN_OPERATORS = P_ASSIGN | P_ASSIGN_PLUS | P_ASSIGN_MINUS | P_ASSIGN_MULTIPLY | P_ASSIGN_DIVIDE | P_ASSIGN_MODULO | P_ASSIGN_BITWISE_LEFT |
                   P_ASSIGN_BITWISE_RIGHT | P_ASSIGN_BITWISE_RIGHT_UNSIG | P_ASSIGN_BITWISE_AND | P_ASSIGN_BITWISE_OR | P_ASSIGN_BITWISE_XOR ;
CREMENT_OPERATORS = P_PLUS_INC | P_MINUS_INC ;
COMPARE_OPERATORS = P_LTE | P_GTE | P_LT | P_GT | P_EQUAL | P_NOT_EQUAL | P_E_EQUAL | P_E_NOT_EQUAL ;
TYPES = T_NUMBER | T_UNDEFINED | T_NULL | T_BOOL | T_STRING | L_VARIABLE;


(* Grammar *)

(* http://www.boost.org/doc/libs/1_54_0/libs/spirit/classic/doc/introduction.html *)
expression  = cal:calculation comp:{compare} ;
compare     = [L_WS] op:COMPARE_OPERATORS [L_WS] cal:calculation [L_WS] ;
calculation = term >> {(P_PLUS >> term) | (P_MINUS >> term)} ;
factor      = [L_WS] (increment | callable | TYPES) [L_WS] | group ;
term        = factor >> {(P_MULTIPLY >> factor) | (P_DIVIDE >> factor)} ;
group       = [L_WS] P_S_OPER_DELI >> expression >> P_E_OPER_DELI [L_WS] ;


program         = {program_basics} ;
program_basics  = switchstatement | forstatement | ifstatement | whilestatement | dowhilestatement | function | statement ;
program_common  = break_statement | return_statement | program_basics ;  (* common statments used in IF, FOR WHILE loops*)
assign          = assign_embed [L_WS] P_STAT_TERMINATOR ;
assign_embed    = var:(variable_create | variable_set) [L_WS] oper:(ASSIGN_OPERATORS) ex:(expression) ;
statement       = assign | (expression [L_WS] P_STAT_TERMINATOR ) ;
statement_embed = assign | expression ;
variable_create = K_VAR L_WS L_VARIABLE [L_WS] ;
variable_set    = L_VARIABLE [L_WS] ;


increment        = pre_increment | post_increment ;
pre_increment    = oper:(P_PLUS_INC | P_MINUS_INC) [L_WS] var:L_VARIABLE ;
post_increment   = var:L_VARIABLE [L_WS] oper:(P_PLUS_INC | P_MINUS_INC) ;


code_block       = P_SCB [L_WS] {program_common} [L_WS] P_ECB ;
return_statement = K_RETURN [L_WS] (ex:expression [L_WS] P_STAT_TERMINATOR) ;
break_statement  = K_BREAK [L_WS] P_STAT_TERMINATOR ;
arguments        = ([L_WS] {L_VARIABLE [L_WS] P_ARGS_DELIMITER [L_WS]} [L_VARIABLE] [L_WS]) ;
function         = function_classic | function_assign ;
function_classic = K_FUNCTION [L_WS] name:L_VARIABLE body:function_body;
function_assign  = name:(variable_create | variable_set) [L_WS] P_ASSIGN [L_WS] K_FUNCTION [L_WS] body:function_body ;
function_body    = [L_WS] P_S_FUNC_DELI [L_WS] sign:arguments [L_WS] P_E_FUNC_DELI [L_WS] code:code_block;


parameters      = ([L_WS] [expression] [L_WS] { [L_WS] P_ARGS_DELIMITER [L_WS] expression [L_WS]} [L_WS]) ;
callable        = name:L_VARIABLE [L_WS] P_S_FUNC_DELI [L_WS] params:parameters [L_WS] P_E_FUNC_DELI ;


codesingleline  = (program_common) | code_block;
ifstatement     = K_IF [L_WS] P_S_FUNC_DELI [L_WS] ex:expression [L_WS] P_E_FUNC_DELI [L_WS] if:codesingleline else:[elsestatement] ;
elsestatement   = [L_WS] K_ELSE else:codesingleline ;


whilestatement   = K_WHILE [L_WS] P_S_FUNC_DELI [L_WS] ex:expression [L_WS] P_E_FUNC_DELI [L_WS] code:codesingleline ;
dowhilestatement = K_DO [L_WS] code:code_block [L_WS] K_WHILE [L_WS] P_S_FUNC_DELI [L_WS] ex:expression [L_WS] P_E_FUNC_DELI [L_WS] P_STAT_TERMINATOR [L_WS];


forstatement     = K_FOR [L_WS] P_S_FUNC_DELI [L_WS] var:[statement_embed]
                   [L_WS] cond:[expression] [L_WS] P_STAT_TERMINATOR
                   [L_WS] exp:[statement_embed] [L_WS] P_E_FUNC_DELI [L_WS] code:codesingleline ;


switchstatement  = K_SWITCH [L_WS] P_S_FUNC_DELI [L_WS] ex:expression [L_WS] P_E_FUNC_DELI [L_WS] 
                   P_SCB [L_WS] cases:{switchdefault | switchcase} [L_WS] P_ECB;
switchcase       = K_CASE {L_WS}+ ex:expression [L_WS] P_PART_CONDITIONAL_OP code:switchcodeblock ;
switchdefault    = K_DEFAULT [L_WS] P_PART_CONDITIONAL_OP code:switchcodeblock ;
switchcodeblock  = {program_common} ;



